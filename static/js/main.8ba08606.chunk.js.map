{"version":3,"sources":["redux/actions/actions.types.js","redux/reducers/todos.js","redux/reducers/index.js","components/TodoItem.js","redux/actions/index.js","components/TodoList.js","components/TodoInput.js","index.js"],"names":["initalState","counter","list","id","text","completed","todos","state","action","type","filter","item","map","todo","rootReducer","combineReducers","TodoItem","dispatch","useDispatch","changeBackground","e","target","style","borderStyle","styled","textDecoration","backgroundColor","className","onMouseEnter","onMouseLeave","onClick","toggleTodo","deleteTodo","TodoList","useSelector","key","TodoInput","useState","setText","handleSubmit","event","addTodo","preventDefault","onSubmit","placeholder","name","value","onChange","store","createStore","RootReducer","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8ba08606.chunk.js","sourcesContent":["export const ADD_COUNTER = \"ADD_COUNTER\";\r\nexport const RESET_COUNTER = \"ADD_COUNTER\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const CLEAR_TODO_LIST = \"CLEAR_TODO_LIST\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\n","import {\r\n  ADD_TODO,\r\n  CLEAR_TODO_LIST,\r\n  DELETE_TODO,\r\n  TOGGLE_TODO\r\n} from \"../actions/actions.types\";\r\n\r\nconst initalState = {\r\n  counter: 0,\r\n  list: [{ id: 0, text: \"Happy Hacking ~v~\", completed: false }]\r\n};\r\n\r\nconst todos = (state = initalState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      return {\r\n        counter: state.counter + 1,\r\n        list: [\r\n          ...state.list,\r\n          { id: state.counter + 1, text: action.text, completed: false }\r\n        ]\r\n      };\r\n    case CLEAR_TODO_LIST:\r\n      return initalState;\r\n    case DELETE_TODO:\r\n      return {\r\n        ...state,\r\n        list: state.list.filter(item => item.id !== action.id)\r\n      };\r\n    case TOGGLE_TODO:\r\n      return {\r\n        ...state,\r\n        list: state.list.map(todo =>\r\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n","import { combineReducers } from \"redux\";\r\n\r\n// import counter from \"./counter\";\r\nimport todos from \"./todos\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todos\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteTodo, toggleTodo } from \"../redux/actions/index\";\r\n\r\nconst TodoItem = ({ id, text, completed }) => {\r\n  const dispatch = useDispatch();\r\n  const changeBackground = (e, text) => {\r\n    e.target.style.borderStyle = text;\r\n    // e.target.style.backgroundColor = \"grey\";\r\n  };\r\n\r\n  const styled = {\r\n    textDecoration: completed ? \"line-through\" : \"none\",\r\n    backgroundColor: completed ? \"#A9A9A9\" : \"#ffffff\"\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    dispatch(deleteTodo(id));\r\n  };\r\n\r\n  const hanldeToggle = () => {\r\n    dispatch(toggleTodo(id));\r\n  };\r\n\r\n  return (\r\n    <li\r\n      style={styled}\r\n      className=\"list-group-item text-capitalize d-flex justify-content-between my-2\"\r\n    >\r\n      <h6>\r\n        {/* {id} : {text} */}\r\n        {text}\r\n\r\n      </h6>\r\n      <div className=\"todo-icon\">\r\n        <span className=\"mx-2 text-success\">\r\n          <i\r\n            className=\"fas fa-check-circle\"\r\n            onMouseEnter={e => changeBackground(e, \"groove\")}\r\n            onMouseLeave={e => changeBackground(e, \"none\")}\r\n            onClick={hanldeToggle}\r\n          />\r\n        </span>\r\n        <span className=\"mx-2 text-danger\">\r\n          <i\r\n            className=\"fas fa-trash\"\r\n            onMouseEnter={e => changeBackground(e, \"groove\")}\r\n            onMouseLeave={e => changeBackground(e, \"none\")}\r\n            onClick={handleDelete}\r\n          />\r\n        </span>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import {\r\n  ADD_COUNTER,\r\n  RESET_COUNTER,\r\n  ADD_TODO,\r\n  CLEAR_TODO_LIST,\r\n  DELETE_TODO,\r\n  TOGGLE_TODO\r\n} from \"./actions.types\";\r\n\r\nlet count = 0;\r\n\r\nexport const addCounter = () => {\r\n  return {\r\n    type: ADD_COUNTER,\r\n    count: ++count\r\n  };\r\n};\r\n\r\nexport const resetCounter = () => {\r\n  return {\r\n    type: RESET_COUNTER,\r\n    count: 0\r\n  };\r\n};\r\n\r\nexport const addTodo = text => {\r\n  return {\r\n    type: ADD_TODO,\r\n    text\r\n  };\r\n};\r\n\r\nexport const clearTodoList = () => {\r\n  return {\r\n    type: CLEAR_TODO_LIST\r\n  };\r\n};\r\n\r\nexport const deleteTodo = id => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    id\r\n  };\r\n};\r\n\r\nexport const toggleTodo = id => {\r\n  return {\r\n    type: TOGGLE_TODO,\r\n    id\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { clearTodoList } from \"../redux/actions/index\";\r\n\r\nconst TodoList = () => {\r\n  const { list } = useSelector(state => state.todos);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClearList = () => {\r\n    dispatch(clearTodoList());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"list-group my-5 border border-light\">\r\n        <h3 className=\"text-capitalize text-center\">Kelvin Todo list</h3>\r\n        {list.map(todo => (\r\n          <TodoItem key={todo.id} {...todo} />\r\n        ))}\r\n      </ul>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-danger btn-block text-capitalize mt-5\"\r\n        onClick={handleClearList}\r\n      >\r\n        clear list\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTodo } from \"../redux/actions/index\";\r\n\r\nconst TodoInput = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = event => {\r\n    if (text !== \"\") {\r\n      dispatch(addTodo(text));\r\n      setText(\"\");\r\n    } else {\r\n      // alert(\"cant not to empty text\");\r\n    }\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-body my-3\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <div className=\"input-group-text bg-primary text-white\">\r\n              <i className=\"fas fa-book\" />\r\n            </div>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control text-capitalize\"\r\n            placeholder=\"add a todo item\"\r\n            name=\"todo\"\r\n            value={text}\r\n            onChange={event => setText(event.target.value)}\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"btn btn-block btn-primary mt-3\"\r\n          onClick={handleSubmit}\r\n        >\r\n          add item\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport RootReducer from \"./redux/reducers/index\";\nimport TodoList from \"./components/TodoList\";\nimport TodoInput from \"./components/TodoInput\";\n\nimport \"./styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = createStore(RootReducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            {/* <h1 className=\"text-capitalize text-center\">Kelvin Todo List</h1> */}\n            <TodoInput />\n            <TodoList />\n          </div>\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}